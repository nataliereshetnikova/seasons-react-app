{"version":3,"sources":["SeasonDisplay.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","message","console","log","this","renderContent","Component","ReactDom","render","document","querySelector"],"mappings":"+LAGMA,G,MAAa,CACfC,OAAO,CACHC,KAAK,sBACLC,SAAS,cAEbC,OAAO,CACHF,KAAK,iBACLC,SAAS,oBA2BFE,EAhBO,SAACC,GACrB,IARiBC,EAAKC,EAQhBC,GARWF,EAQQD,EAAMC,KARTC,GAQc,IAAIE,MAAOC,YAPnC,GAAKH,EAAQ,GAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAGC,EAENP,EAAaS,GAA/BP,EAFwB,EAExBA,KAAMC,EAFkB,EAElBA,SAEb,OACE,yBAAKS,UAAS,uDAAkDH,IAC9D,wBAAIG,UAAU,aACZ,uBAAGA,UAAS,UAAKT,EAAL,6BACXD,EACD,uBAAGU,UAAS,UAAKT,EAAL,+BAEd,gJC5BAU,E,4MAQJC,MAAQ,CAAEP,IAAK,KAAMQ,aAAc,I,kEACd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEd,IAAKa,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAW,EAAKH,SAAS,CAAEN,aAAcS,EAAMC,aAEjDC,QAAQC,IAAI,sC,2CAGZD,QAAQC,IAAI,uB,sCAGZ,OAAIC,KAAKd,MAAMP,KAAmC,KAA5BqB,KAAKd,MAAMC,aAE7B,6BACE,kBAAC,EAAD,CAAeR,IAAKqB,KAAKd,MAAMP,OAGzBqB,KAAKd,MAAMP,KAAmC,KAA5BqB,KAAKd,MAAMC,aAIrC,yBAAKH,UAAU,oBACb,yBAAKA,UAAU,sBAAf,uCAJG,uCAAagB,KAAKd,MAAMC,aAAxB,O,+BAUT,OACE,6BACGa,KAAKC,qB,GAvCIC,aA4ClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.762b1033.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from \"react\";\n\nconst seasonConfig={\n    summer:{\n        text:'Let\\'s hit the beach',\n        iconName:'yellow sun'\n    },\n    winter:{\n        text:'Brr, it\\'s cold',\n        iconName:'blue snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 3 && month < 10) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\nconst SeasonDisplay = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const {text, iconName} = seasonConfig[season];\n\n  return (\n    <div className={`ui raised very padded text container segment ${season}`}>\n      <h1 className=\"ui header\">\n        <i className={`${iconName} massive icon icon-left`}/>\n        {text}\n        <i className={`${iconName} massive icon icon-right`}/>\n      </h1>\n      <p>This app determines user latitude and based on that show whether it is warm or cold weather in your hemisphere.</p>\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\n\nclass App extends Component {\n  //   constructor(props) {\n  //     super(props);\n  //     this.state = {\n  //       lat: null,\n  //       errorMessage: \"\",\n  //     };\n  //   }\n  state = { lat: null, errorMessage: \"\" };\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (error) => this.setState({ errorMessage: error.message })\n    );\n    console.log(\"component rendered on the screen\");\n  }\n  componentDidUpdate() {\n    console.log(\"component updated\");\n  }\n  renderContent(){\n    if (this.state.lat && this.state.errorMessage === \"\") {\n      return (\n        <div>\n          <SeasonDisplay lat={this.state.lat} />\n        </div>\n      );\n    } else if (!this.state.lat && this.state.errorMessage !== \"\") {\n      return <div>Error: {this.state.errorMessage} </div>;\n    } else {\n      return (\n        <div className='ui active dimmer'>\n          <div className=\"ui big text loader\">Please accept the location request</div>\n        </div>\n      );\n    }\n  }\n  render() {\n    return (\n      <div>\n        {this.renderContent()}\n      </div>);\n  }\n}\n\nReactDom.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}